#!/bin/bash
#
# WRT Buildroot Manager tool.
#
# Not yet implemented: patches & quilt; kernel; uClibc menuconfig; .config tracking ; vendor kernel selection
#
# This doesnt replace `make target/linux` or the many other targets for hardcore development, wrt-project
# does simplfy management of extended build profiles and sharing with other systems
#
#
# This file needs to become a wrapper that calls `make` around the logic of this file
#

# Fail fast.
set -e

test -d "$WRT_BUILDROOT_DIR" || { echo "Cannot find wrt-buildroot-manager directory! Did you source 'wrt-buildroot-manager.source'?" ; exit 1 ; }
test -d "$WRT_BUILDROOT_TEMPLATE" || { echo "Cannot find Template directory! Did you source 'wrt-buildroot-manager.source'?" ; exit 1 ; }

source "$WRT_BUILDROOT_DIR"/rules.source

TOP_DIR=`pwd`

#
# Check project
#
function validate_project_file() {
  test -e "$PROJECT_FILE"  || { echo "Cannot find $PROJECT_FILE in current directory." ; exit 1 ; }
}

#
# Check sane settings
#
function validate_project_settings() {
  test -z "$CUSTOM_OPENWRT_GIT" && { echo "Missing \$CUSTOM_OPENWRT_GIT"; exit 1; }
  test -z "$CUSTOM_OPENWRT_GIT_BRANCH" && { echo "Missing \$CUSTOM_OPENWRT_GIT_BRANCH"; exit 1; }
  true
}

#
# Create a project in the specified directory.
#
# $1    Destination directory; created if it does not exist.
# $2..n Options: --no-git
# $n+1  template=directory option for post merging local overrides
#
function do_create() {
  DEST="$1"
  test -z "$1" && { echo "Missing destination argument."; exit 1; }
  mkdir -p "$DEST"
  shift

  NO_GIT=0
  # TODO - this needs to become a loop
  if [ "$1" == "--no-git" ] ; then NO_GIT=1 ; fi

  cd "$DEST"
  cp -v "$WRT_BUILDROOT_TEMPLATE"/* .

  TEMPLATE="${1##template=}"
  test -z "$TEMPLATE" || test -d "$TEMPLATE" || { echo "Warning: local Template directory not found! Not merging local overrides."; }

  # Initially, do a dumb merge:  just copy user template over the top.
  test -d "$TEMPLATE" && cp -v "$TEMPLATE"/* .

  # Rename special files
  mv -v dot.gitignore .gitignore

  # Now by default create a git repository
  # If one exists, script should die because of `set -e`

  echo "Project created `date`" > README.md

  # User may have this as a subdirectory of another git repository and not want do do this
  if [ $NO_GIT -eq 0 ] ; then
    git init
    git add -A
    git commit -m "Initial."
  fi
}

#
# Clone OpenWRT if not already cloned.
# Silently ignore if directory exists even if it is not a git repository (assume user knows what they are doing)
#
function do_clone_openwrt() {
  if ! test -d "$OPENWRT_ROOT" ; then
    git clone "$CUSTOM_OPENWRT_GIT" "$OPENWRT_ROOT"
    (cd "$OPENWRT_ROOT" && git checkout "$CUSTOM_OPENWRT_GIT_BRANCH")
  fi
}

#
# Setup package feeds.
# If no CUSTOM_FEEDS exists, will use OpenWRT defaults
# Assumes packages have no spaces in names
#
function do_feeds() {
  if ! test -e .feeds.stamp ; then
    test -e "$CUSTOM_FEEDS" && cp "$CUSTOM_FEEDS" "$OPENWRT_ROOT"/feeds.conf
    ( cd "$OPENWRT_ROOT" && scripts/feeds update )
    ( cd "$OPENWRT_ROOT" && test -e "$CUSTOM_PACKAGES" && scripts/feeds install `cat "$CUSTOM_PACKAGES"` ) || true
    touch .feeds.stamp
  fi
}

#
# Prepare project dot.config
#
function do_config() {
  if ! test -e .config.stamp ; then
    test -e "$CUSTOM_CONFIG" && cp "$CUSTOM_CONFIG" "$OPENWRT_ROOT"/.config
    ( cd "$OPENWRT_ROOT" && make defconfig )
    cp "$OPENWRT_ROOT"/.config .config.cache
    touch .config.stamp
  fi
}

#
# Copy files/
#
function do_files() {
  test -z "$CUSTOM_FILES" && return 0
  test -d "$CUSTOM_FILES" || return 0

  # Reminder on correct placement of slashes on each argument
  rsync -av "$CUSTOM_FILES" "$OPENWRT_ROOT"/files
}

#
# Apply kernel patches
#
# Currently these are git patches against the openwrt tree which just happen to be for the kernel
# So this will currently apply them everywhere...
#
function do_kernel_patches() {
  # Remove & reapply.

	# HOW DO WE HANDLE CHANGES MID_STREAM? use git reset / git checkout ?
	#QUILT_PATCHES="$TOP_DIR/patches/kernel" quilt pop -a
	#QUILT_PATCHES="$TOP_DIR/patches/kernel" quilt push -a

  # Or use import so we can flush them
	test ! -e "$TOP_DIR/patches/kernel/series" && return
  ( cd "$OPENWRT_ROOT" ; test -d patches && quilt pop -a ) || true
  ( cd "$OPENWRT_ROOT" ; rm -rf patches .pc ; QUILT_PATCHES="$TOP_DIR/patches/kernel" quilt push -a )
}

#
# Make the world
#
function do_world() {
  ( cd "$OPENWRT_ROOT" && make ${CUSTOM_MAKE_CONCURRENCY:+-j$CUSTOM_MAKE_CONCURRENCY} )
}

#
# Build a project in the current directory.
#
# This _could_ have been done using Makefiles. But the intention is to really be a straight-line process.
# OpenWRT itself uses Makefiles and we leverage that when needed.
# Also I would like to make this file understandable to a casual user.
#
function do_build() {
  DIR=`pwd`

  validate_project_file
  source "$PROJECT_FILE" && validate_project_settings

  do_clone_openwrt
  do_feeds
  do_config
  # FIXME - refresh config
  do_files
  do_kernel_patches
  do_world
}

#
# Make a project in the current directory.
#
function do_make() {
  DIR=`pwd`

  validate_project_file
  source "$PROJECT_FILE" && validate_project_settings

  # FIXME - refresh config
  do_files
  do_kernel_patches
  do_world
}

function do_configup {
  DIR=`pwd`

  validate_project_file
  source "$PROJECT_FILE" && validate_project_settings
	cp dot.config "$OPENWRT_ROOT"/.config
	cd "$OPENWRT_ROOT" && make defconfig && make -j4
}

#
# For more advanced stuff (recompiling things) need to jump in manually still
#

#
# Clean files causing a complete rebuild
#
function do_clean() {
  DIR=`pwd`

  validate_project_file
  source "$PROJECT_FILE" && validate_project_settings

  rm -fv .feeds.stamp .config.stamp \
     "$OPENWRT_ROOT"/feeds.conf "$OPENWRT_ROOT"/.config "$OPENWRT_ROOT"/.config.old
}

#
# Clean everything
#
function do_distclean() {
  DIR=`pwd`

  validate_project_file
  source "$PROJECT_FILE" && validate_project_settings

	(cd "$OPENWRT_ROOT" && git clean -x -f d )
}

function do_checksec() {
	# If https://github.com/pastcompute/checksec.sh has been cloned into the WBM code directory then run it over most recent WRT rootfs
  DIR=`pwd`

  validate_project_file
  source "$PROJECT_FILE" && validate_project_settings

	test -e "$WRT_BUILDROOT_DIR"/checksec.sh/checksec.sh

	# cd openwrt/staging_dir/target-mips_34kc_uClibc-0.9.33.2/root-ar71xx
	STAGING_DIR_ROOT=`make -C "$OPENWRT_ROOT" --no-print-directory  var.STAGING_DIR_ROOT V=s`
	eval STAGING_DIR_ROOT=${STAGING_DIR_ROOT#STAGING_DIR_ROOT=}

	cd "$STAGING_DIR_ROOT" && for p in lib usr/lib sbin usr/sbin bin usr/bin ; do "$WRT_BUILDROOT_DIR"/checksec.sh/checksec.sh --dir $p ; done
}

#
# Main command logic.
#

VERB="$1"

case "$VERB" in
create)
  shift
  do_create "${@}"
  ;;

build)
  shift
  do_build "${@}"
  ;;

configup)
  shift
  do_configup "${@}"
  ;;

make)
  shift
  do_make "${@}"
  ;;

clean)
  shift
  do_clean "${@}"
  ;;

distclean)
  shift
  do_distclean "${@}"
  ;;

checksec)
	shift
  do_checksec "${@}"
	;;

*)
  cat <<EOF
wrt-project create path/to/directory [--no-git] [template=path/to/override/dir]
wrt-project build
wrt-project make
wrt-project clean
wrt-project distclean
EOF
  ;;

esac

